//
//  02g2TurVelPro.h
//  Process Model (Cross-Platform)
//
//  Created by Matthew Cheung on 21/09/2020.
//  Copyright Â© 2020 Matthew Cheung. All rights reserved.
//  
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or 
//  any later version.
//  
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef TurVelProVar_h
#define TurVelProVar_h

/// This subroutine is used for the data collection of the turbulent flow velocity profile using Prandtl's one-seventh law.
/// @param umax Maximum point fluid velocity (m/ s). This value is inferred from the average fluid velocity.
/// @param d Pipe diameter (mm).
void TurVelProVariable(double *umax, double *d);

#endif /* TurVelProVar_h */

#ifndef TurVelProCalc_h
#define TurVelProCalc_h

/// This subroutine is used to determine the point velocity by utilising the relationship between the point velocity and maximum velocity given by Prandtl's one-seventh law.
/// @param vmax Maximum point fluid velocity (m/ s).
/// @param r Pipe point radius (m).
/// @param d Fixed pipe diameter (m).
/// @param gen v/v_{max}. N.B. This value is generated alongside the calculation
double TurVelCalculation(double vmax, double r, double d, double *gen);

#endif /* TurVelProCalc_h */

#ifndef TurVelProfCalc_h
#define TurVelProfCalc_h

typedef struct TurVelProfile{
    double r[5000]; //  Point radius
    double v_x[5000]; //  Point velocity
    double ratio[5000]; //  Velocity ratio
} TurVelProf;

/// This subroutine is used to generate the data for the velocity profile for a turbulent fluid that obeys Prandtl's one-seventh law. This subroutine returns the generated array to the calling function.
/// @param vmax Maximum fluid velocity (m/ s).
/// @param d Fixed pipe diameter (m).
TurVelProf TurVelProCalculation(double vmax, double d, int *rows);

#endif /* TurVelProfCalc_h */

#ifndef TurVelProDisp_h
#define TurVelProDisp_h

/// This subroutine is used to output the results of this program to the user console.
/// @param umax Maximum fluid velocity (m/s).
/// @param d Pipe diameter (m).
/// @param rows Number of rows generated by "TurVelProfCalc(...)"
/// @param profile Velocity profile.
void TurVelProDisplay(double umax, double d, int rows, TurVelProf profile);

#endif /* TurVelProDisp_h */

#ifndef TurVelProWrite_h
#define TurVelProWrite_h

/// This subroutine is used to output the results of this program to a .txt file.
/// @param umax Maximum fluid velocity (m/s)
/// @param d Pipe diameter (m)
/// @param rows Number of rows generated by "TurVelProfCalc(...)"
/// @param profile Velocity profile.
void TurVelProWrite(double umax, double d, int rows, TurVelProf profile);

/// Subroutine to ask the user if they would like to either display the results on the console or save the results of this program to a file.
/// @param mode Integer used to control whether this function will access the display (1) or write (2) function.
/// @param umax Maximum fluid velocity (m/s)
/// @param d Pipe diameter (m)
/// @param rows Number of rows generated by "TurVelProfCalc(...)"
/// @param profile Velocity profile.
void TurVelProSwitch(int mode, double umax, double d, int rows, TurVelProf profile);

#endif /* TurVelProWrite_h */

#ifndef TurVelPro_h
#define TurVelPro_h

/// This pseudomain subroutine is used to control the behaviour of the subroutines listed in this file.
void TurbulentVelPro(void);

#endif /* TurVelPro_h */
